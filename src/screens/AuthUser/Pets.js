import React, {useCallback, useEffect, useState} from 'react';
import {
  Dimensions,
  ImageBackground,
  Pressable,
  SafeAreaView,
  StyleSheet,
  View,
  Text,
  FlatList,
} from 'react-native';
import {generateClient} from 'aws-amplify/api';
import {scaleFontSize} from '../../assets/styles/scaling';
import {petsByUser} from '../../graphql/queries';
import {useSelector} from 'react-redux';
import globalStyle from '../../assets/styles/globalStyle';
import Ionicons from 'react-native-vector-icons/Ionicons';
import DashedBorderButton from '../../components/Buttons/DashedBorderButton';
import PetCard from '../../components/PetCard';
import AsyncStorage from '@react-native-async-storage/async-storage';

const Pets = ({navigation}) => {
  const [pets, setPets] = useState([]);
  const userID = useSelector(state => state.user.cognitoUsername);
  const [isFetchPetsComplete, setIsFetchPetsComplete] = useState(false);

  /* 로그인한 사용자의 모든 반려동물(PetPage objects) 가져오기 */
  useEffect(() => {
    const fetchPets = async () => {
      try {
        const client = generateClient();
        const response = await client.graphql({
          query: petsByUser,
          variables: {managerID: userID},
          authMode: 'userPool',
        });
        const petData = response.data.petsByUser.items;
        console.log(
          'num of pets getting pets from db: ',
          response.data.petsByUser.items.length,
        );
        return petData;
      } catch (error) {
        console.log('error for getting pets from db: ', error);
      }
    };
    fetchPets().then(response => {
      setPets(response);
      setIsFetchPetsComplete(true);
      // response.map(pet => storeDataAsyncStorage(pet));
    });
  }, []);

  // const storeDataAsyncStorage = async pet => {
  //   try {
  //     const value = {
  //       name: pet.name,
  //       profilePic: pet.profilePic,
  //       birthday: pet.birthday,
  //       deathDay: pet.deathDay,
  //       lastWord: pet.lastWord,
  //     };
  //     const jsonValue = JSON.stringify(value);
  //     await AsyncStorage.setItem(pet.petID, jsonValue); // key value is petID generated by db
  //   } catch (e) {
  //     console.log('error while saving info into RN Async storage', e);
  //   }
  // };

  const renderAddNewPetButton = useCallback(() => {
    return (
      isFetchPetsComplete && (
        <View style={styles.addNewPetButtonContainer}>
          <DashedBorderButton
            type={'regular'}
            title={'새로운 추모공간 만들기'}
            circleSize={40}
            titleColor={'white'}
            onPress={() => navigation.navigate('AddNewPet')}
          />
        </View>
      )
    );
  }, [isFetchPetsComplete]);

  return (
    <SafeAreaView style={globalStyle.flex}>
      <ImageBackground
        style={styles.backgroundImage}
        source={require('../../assets/images/milkyWayBackgroundImage.png')}
        resizeMode={'cover'}>
        <Pressable
          style={styles.settingsContainer}
          onPress={() => navigation.navigate('UserSettings')}>
          <Ionicons name={'settings-outline'} color={'#FFF'} size={18} />
          <Text style={styles.settings}>나의 계정 관리</Text>
        </Pressable>
        {isFetchPetsComplete && pets.length > 0 && (
          <View style={styles.flatListContainer}>
            <FlatList
              data={pets}
              renderItem={({item}) => (
                <PetCard
                  petID={item.id}
                  profilePic={item.profilePic}
                  name={item.name}
                  birthday={item.birthday}
                  deathDay={item.deathDay}
                  lastWord={item.lastWord}
                />
              )}
            />
          </View>
        )}
        {renderAddNewPetButton()}
      </ImageBackground>
    </SafeAreaView>
  );
};

export default Pets;

const styles = StyleSheet.create({
  backgroundImage: {
    flex: 1,
  },
  settingsContainer: {
    flexDirection: 'row',
    alignItems: 'center',
    paddingLeft: 10,
    paddingTop: 10,
  },
  settings: {
    color: '#FFF',
    fontSize: scaleFontSize(14),
    marginLeft: 7,
    fontWeight: '600',
  },
  flatListContainer: {
    paddingTop: Dimensions.get('window').height * 0.02,
    flex: 1,
    backgroundColor: 'transparent',
    alignItems: 'center',
  },
  addNewPetButtonContainer: {paddingHorizontal: 15, marginVertical: 15},
});
