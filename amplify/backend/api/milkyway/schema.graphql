# This "input" configures a global authorization rule to enable public access to
# all models in this schema. Learn more about authorization rules here: https://docs.amplify.aws/cli/graphql/authorization-rules
#input AMPLIFY { globalAuthRule: AuthRule = { allow: public } } # FOR TESTING ONLY!

type Pet @model
@auth(
    rules: [
        { allow: groups, groups: ["admin"] }
        { allow: owner},
        { allow: private, operations: [read]}
    ])

{
    id: ID! @primaryKey
    profilePic: String
    name: String @index(name: "byName", queryField: "petByName", sortKeyFields: ["id"])
    birthday: String
    deathDay: String
    lastWord: String
    accessLevel: String @index (name: "byAccessLevel", queryField: "petsByAccessLevel")
    deathCause: String
    identityId: String!
    petType: String
    managerID: ID!
}

type InactivePet @model (mutations: {create: "migrateToInactivePet", delete: "deleteInactivePet"})
@auth(
    rules: [
        { allow: groups, groups: ["admin"] }
        { allow: owner},
        { allow: private, operations: [read]}
    ])

{
    id: ID! @primaryKey
    profilePic: String
    name: String
    birthday: String
    deathDay: String
    lastWord: String
    deathCause: String
    identityId: String!
    petType: String
    managerID: ID!
}

type PetPageBackgroundImage @model (queries: {get: "getPetpageBackgroundImage"})
@auth(
    rules: [
        { allow: groups, groups: ["admin"] }
        { allow: owner},
        { allow: private, operations: [read]}
    ])
{
    petID: ID! @primaryKey
    backgroundImageKey: String!
}

type PetFamily @model (
    mutations: {create: "createPetFamily", delete: "deletePetFamily"})
@auth(
    rules: [
        { allow: groups, groups: ["admin"] }
        { allow: owner},
        { allow: private, operations: [read]}
    ])
{
    petID: ID! @index (name: "byPetID", queryField: "petPageFamilyMembers")
    familyMemberID: ID! @primaryKey(sortKeyFields: ["petID"])
}

type PetIntroduction @model (queries: {get: "getIntroductionMessage"})
@auth(
    rules: [
        { allow: groups, groups: ["admin"] }
        { allow: owner},
        { allow: private, operations: [read]}
    ])
{
    petID: ID! @primaryKey
    introductionMsg: String!
}

enum userState {
    ACTIVE
    INACTIVE
}

type User @model(queries: {get: "getUser"}, mutations: {create: "createUser", update: "updateUser"}, subscriptions: null)
@auth(
    rules: [
        { allow: groups, groups: ["admin"] }
        { allow: owner, ownerField: "id"},
        { allow: private, operations: [read]}
    ])
{
    id: ID! @primaryKey
    email: String!
    profilePic: String
    name: String!
    state: userState!
}

enum letterAccessLevel {
    PRIVATE
    PUBLIC
}

type Letter @model
@auth(
    rules: [
        { allow: groups, groups: ["admin"] }
        { allow: owner},
        { allow: private, operations: [read]}
    ])
{
    id: ID!
    petID: ID! @primaryKey(sortKeyFields:["createdAt", "id"])
    title: String!
    relationship: String!
    content: String!
    createdAt: String!
    letterAuthorId: ID!
    identityId: String!
    author: User @hasOne (fields: ["letterAuthorId"])
    accessLevel: letterAccessLevel!
}

type GuestBook @model
@auth(
    rules: [
        { allow: groups, groups: ["admin"] }
        { allow: owner},
        { allow: private, operations: [read]}
    ])
{
    id: ID!
    petID: ID! @primaryKey(sortKeyFields:["createdAt", "id"])
    content: String!
    createdAt: String!
    identityId: String!
    author: User @hasOne
}

type Album @model
@auth(
    rules: [
        { allow: groups, groups: ["admin"] }
        { allow: owner},
        { allow: private, operations: [read]}
    ])
{
    id: ID!
    petID: ID! @primaryKey(sortKeyFields:["createdAt", "id"])
    category: Int @index(name: "albumCategory", queryField: "albumByCategory")
    caption: String
    createdAt: String!
    authorIdentityID: String!
    imageType: Int!
    widthHeight: String
    s3Folder: String!
}

type Manager @model
@auth(
    rules: [
        {allow: groups, groups: ["admin"]}
    ])
{
    id: ID!
    petID: ID
    requesterID: ID!
    category: Int!
    clientMessage: String!
    status: Int!
    adminComment: String
}
